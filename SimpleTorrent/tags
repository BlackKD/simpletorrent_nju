!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BE_DICT	src/bencode.h	/^	BE_DICT,$/;"	e	enum:__anon1
BE_INT	src/bencode.h	/^	BE_INT,$/;"	e	enum:__anon1
BE_LIST	src/bencode.h	/^	BE_LIST,$/;"	e	enum:__anon1
BE_STR	src/bencode.h	/^	BE_STR,$/;"	e	enum:__anon1
BTDATA_H	src/btdata.h	6;"	d
BT_COMPLETED	src/btdata.h	22;"	d
BT_STARTED	src/btdata.h	20;"	d
BT_STOPPED	src/btdata.h	21;"	d
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= -std=c99 -g$/;"	m
Computed	src/sha1.h	/^    int Computed;               \/* Is the digest computed?          *\/$/;"	m	struct:SHA1Context
Corrupted	src/sha1.h	/^    int Corrupted;              \/* Is the message digest corruped?  *\/$/;"	m	struct:SHA1Context
DEBUG	src/mytorrent.h	6;"	d
FALSE	src/peers_pool.h	5;"	d
LIBS	Makefile	/^LIBS= -lpthread$/;"	m
Length_High	src/sha1.h	/^    unsigned Length_High;       \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
Length_Low	src/sha1.h	/^    unsigned Length_Low;        \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
MAXLINE	src/util.h	19;"	d
Message_Block	src/sha1.h	/^    unsigned char Message_Block[64]; \/* 512-bit message blocks      *\/$/;"	m	struct:SHA1Context
Message_Block_Index	src/sha1.h	/^    int Message_Block_Index;    \/* Index into message block array   *\/$/;"	m	struct:SHA1Context
Message_Digest	src/sha1.h	/^    unsigned Message_Digest[5]; \/* Message Digest (output)          *\/$/;"	m	struct:SHA1Context
OBJS	Makefile	/^OBJS=src\/util.o \\$/;"	m
SHA1CircularShift	src/sha1.c	46;"	d	file:
SHA1Context	src/sha1.h	/^typedef struct SHA1Context$/;"	s
SHA1Context	src/sha1.h	/^} SHA1Context;$/;"	t	typeref:struct:SHA1Context
SHA1Input	src/sha1.c	/^void SHA1Input(     SHA1Context         *context,$/;"	f
SHA1PadMessage	src/sha1.c	/^void SHA1PadMessage(SHA1Context *context)$/;"	f
SHA1ProcessMessageBlock	src/sha1.c	/^void SHA1ProcessMessageBlock(SHA1Context *context)$/;"	f
SHA1Reset	src/sha1.c	/^void SHA1Reset(SHA1Context *context)$/;"	f
SHA1Result	src/sha1.c	/^int SHA1Result(SHA1Context *context)$/;"	f
SOURCES	Makefile	/^SOURCES=src\/util.c \\$/;"	m
TARGET	Makefile	/^TARGET=simpletorrent$/;"	m
TESTA	src/shatest.c	28;"	d	file:
TESTB	src/shatest.c	31;"	d	file:
TESTB_1	src/shatest.c	29;"	d	file:
TESTB_2	src/shatest.c	30;"	d	file:
TESTC	src/shatest.c	32;"	d	file:
TRUE	src/peers_pool.h	4;"	d
UTIL_H	src/util.h	17;"	d
_BENCODE_H	src/bencode.h	14;"	d
_SHA1_H_	src/sha1.h	25;"	d
__FILE_IO_H_	src/fileio.h	2;"	d
__GLOBAL_H_	src/mytorrent.h	5;"	d
__PEERS_POOL_H__	src/peers_pool.h	2;"	d
__PEERWIRE_H__	src/peer_wire.h	2;"	d
_announce_url_t	src/btdata.h	/^typedef struct _announce_url_t {$/;"	s
_be_decode	src/bencode.c	/^static be_node *_be_decode(const char **data, long long *data_len)$/;"	f	file:
_be_decode_int	src/bencode.c	/^static long long _be_decode_int(const char **data, long long *data_len)$/;"	f	file:
_be_decode_str	src/bencode.c	/^static char *_be_decode_str(const char **data, long long *data_len)$/;"	f	file:
_be_dump	src/bencode.c	/^static void _be_dump(be_node *node, ssize_t indent)$/;"	f	file:
_be_dump_indent	src/bencode.c	/^static void _be_dump_indent(ssize_t indent)$/;"	f	file:
_be_free_str	src/bencode.c	/^static inline void _be_free_str(char *str)$/;"	f	file:
_peer_t	src/btdata.h	/^typedef struct _peer_t {$/;"	s
_peerdata	src/btdata.h	/^typedef struct _peerdata {$/;"	s
_peerpool_node_t	src/peers_pool.h	/^typedef struct _peerpool_node_t {$/;"	s
_torrentmetadata	src/btdata.h	/^typedef struct _torrentmetadata {$/;"	s
_tracker_data	src/btdata.h	/^typedef struct _tracker_data {$/;"	s
_tracker_request	src/btdata.h	/^typedef struct _tracker_request {$/;"	s
_tracker_response	src/btdata.h	/^typedef struct _tracker_response {$/;"	s
am_choking	src/btdata.h	/^    int am_choking;        \/\/ 作为下载者, 被远端peer阻塞$/;"	m	struct:_peer_t
am_interested	src/btdata.h	/^    int am_interested;     \/\/ 远端peer对我们的分片有兴趣$/;"	m	struct:_peer_t
announce	src/btdata.h	/^    char* announce; \/\/ tracker的URL$/;"	m	struct:_torrentmetadata
announce_url_t	src/btdata.h	/^} announce_url_t;$/;"	t	typeref:struct:_announce_url_t
be_alloc	src/bencode.c	/^static be_node *be_alloc(be_type type)$/;"	f	file:
be_decode	src/bencode.c	/^be_node *be_decode(const char *data)$/;"	f
be_decoden	src/bencode.c	/^be_node *be_decoden(const char *data, long long len)$/;"	f
be_dict	src/bencode.h	/^typedef struct be_dict {$/;"	s
be_dict	src/bencode.h	/^} be_dict;$/;"	t	typeref:struct:be_dict
be_dump	src/bencode.c	/^void be_dump(be_node *node)$/;"	f
be_free	src/bencode.c	/^void be_free(be_node *node)$/;"	f
be_node	src/bencode.h	/^typedef struct be_node {$/;"	s
be_node	src/bencode.h	/^} be_node;$/;"	t	typeref:struct:be_node
be_str_len	src/bencode.c	/^long long be_str_len(be_node *node)$/;"	f
be_type	src/bencode.h	/^} be_type;$/;"	t	typeref:enum:__anon1
begin_index	src/fileio.h	/^    int begin_index;$/;"	m	struct:fileinfo_t
bitfield	src/mytorrent.h	/^    char    *bitfield;$/;"	m	struct:globalInfo_t
c	src/peer_wire.h	/^	char c;             \/\/ should be '\\19'$/;"	m	struct:handshake_seg_
client_shutdown	src/shutdown.c	/^void client_shutdown(int sig)$/;"	f
connect_to_host	src/util.c	/^int connect_to_host(char* ip, int port)$/;"	f
connfd	src/btdata.h	/^    int connfd;$/;"	m	struct:_peer_t
createfile	src/fileio.c	/^FILE *createfile(char *filepath, int size){$/;"	f
d	src/bencode.h	/^		struct be_dict *d;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_dict
data	src/btdata.h	/^    char* data;     \/\/ B编码的字符串$/;"	m	struct:_tracker_response
downloaded	src/btdata.h	/^    int downloaded;$/;"	m	struct:_tracker_request
exists	src/fileio.c	/^bool exists(char *filepath){$/;"	f
file_len	src/util.c	/^int file_len(FILE* fp)$/;"	f
fileinfo_t	src/fileio.h	/^struct fileinfo_t {$/;"	s
filename	src/fileio.h	/^    char filename[80];\/\/ with path$/;"	m	struct:fileinfo_t
filesize	src/fileio.c	/^int filesize(FILE *fp){$/;"	f
find_peer_from_tracker	src/peers_pool.c	/^peerdata *find_peer_from_tracker(char peer_id[20]) {$/;"	f
find_peernode	src/peers_pool.c	/^peerpool_node_t *find_peernode(char peer_id[20]) {$/;"	f
flist	src/btdata.h	/^    struct fileinfo_t flist;$/;"	m	struct:_torrentmetadata	typeref:struct:_torrentmetadata::fileinfo_t
fp	src/fileio.h	/^    FILE *fp;$/;"	m	struct:fileinfo_t
g_done	src/mytorrent.h	/^    int     g_done;$/;"	m	struct:globalInfo_t
g_downloaded	src/mytorrent.h	/^    int     g_downloaded;$/;"	m	struct:globalInfo_t
g_left	src/mytorrent.h	/^    int     g_left;$/;"	m	struct:globalInfo_t
g_my_id	src/mytorrent.h	/^    char    g_my_id[20];$/;"	m	struct:globalInfo_t
g_my_ip	src/mytorrent.h	/^    char    g_my_ip[16];$/;"	m	struct:globalInfo_t
g_peer_port	src/mytorrent.h	/^    int     g_peer_port;$/;"	m	struct:globalInfo_t
g_peerpool_head	src/peers_pool.c	/^peerpool_node_t *g_peerpool_head = NULL; \/\/ list$/;"	v
g_torrentmeta	src/mytorrent.h	/^    torrentmetadata_t   *g_torrentmeta;$/;"	m	struct:globalInfo_t
g_tracker_ip	src/mytorrent.h	/^    char    g_tracker_ip[16];$/;"	m	struct:globalInfo_t
g_tracker_port	src/mytorrent.h	/^    int     g_tracker_port;$/;"	m	struct:globalInfo_t
g_tracker_response	src/mytorrent.h	/^    tracker_data        *g_tracker_response;$/;"	m	struct:globalInfo_t
g_uploaded	src/mytorrent.h	/^    int     g_uploaded;$/;"	m	struct:globalInfo_t
gen_bitfield	src/fileio.c	/^char *gen_bitfield(char *piece_hash, int piece_len, int piece_num){$/;"	f
get_any_piece	src/fileio.c	/^int get_any_piece(FILE *fp, char *buf, int begin, int len, int piece_num, int piece_size){$/;"	f
get_block	src/fileio.c	/^void get_block(int index, int begin, int length, char *block){$/;"	f
get_peer_data	src/process_tracker_response.c	/^void get_peer_data(peerdata* peer, be_node* ben_res)$/;"	f
get_peers	src/process_tracker_response.c	/^void get_peers(tracker_data* td, be_node* peer_list)$/;"	f
get_piece	src/fileio.c	/^int get_piece(FILE *fp, char *buf, int piece_num, int piece_size){$/;"	f
get_tracker_data	src/process_tracker_response.c	/^tracker_data* get_tracker_data(char* data, int len)$/;"	f
globalArgs	src/mytorrent.c	/^struct globalArgs_t globalArgs;$/;"	v	typeref:struct:globalArgs_t
globalArgs_t	src/mytorrent.h	/^struct globalArgs_t{$/;"	s
globalInfo	src/mytorrent.c	/^struct globalInfo_t globalInfo;$/;"	v	typeref:struct:globalInfo_t
globalInfo_t	src/mytorrent.h	/^struct globalInfo_t{$/;"	s
handshake_handler	src/peer_wire.c	/^int handshake_handler(handshake_seg * seg, int flag, int connfd) {$/;"	f
handshake_seg	src/peer_wire.h	/^typedef struct handshake_seg_ handshake_seg;$/;"	t	typeref:struct:handshake_seg_
handshake_seg_	src/peer_wire.h	/^struct handshake_seg_ {$/;"	s
hash	src/fileio.h	/^ 	int hash[5];$/;"	m	struct:hashptr_t
hashptr_t	src/fileio.h	/^struct hashptr_t{$/;"	s
hostname	src/btdata.h	/^    char* hostname;$/;"	m	struct:_announce_url_t
i	src/bencode.h	/^		long long i;$/;"	m	union:be_node::__anon2
id	src/btdata.h	/^    char id[21]; \/\/ 20用于null终止符$/;"	m	struct:_peerdata
info_hash	src/btdata.h	/^    int info_hash[5]; \/\/ torrent的info_hash值(info键对应值的SHA1哈希值)$/;"	m	struct:_torrentmetadata
info_hash	src/btdata.h	/^    int info_hash[5];$/;"	m	struct:_tracker_request
init	src/simpletorrent.c	/^void init()$/;"	f
interval	src/btdata.h	/^    int interval;$/;"	m	struct:_tracker_data
ip	src/btdata.h	/^    char ip[16]; \/\/ Null终止$/;"	m	struct:_peerdata
ip	src/btdata.h	/^    char ip[16]; \/\/ 自己的IP地址, 格式为XXX.XXX.XXX.XXX, 最后以'\\0'结尾$/;"	m	struct:_tracker_request
isseed	src/mytorrent.h	/^    int     isseed;$/;"	m	struct:globalArgs_t
key	src/bencode.h	/^	char *key;$/;"	m	struct:be_dict
l	src/bencode.h	/^		struct be_node **l;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_node
left	src/btdata.h	/^    int left;$/;"	m	struct:_tracker_request
length	src/btdata.h	/^    int length;     \/\/ 文件长度, 以字节为单位$/;"	m	struct:_torrentmetadata
list_get_piece	src/fileio.c	/^int list_get_piece(struct fileinfo_t *fileinfo, char *buf, int len, int begin){$/;"	f
list_set_piece	src/fileio.c	/^int list_set_piece(struct fileinfo_t *fileinfo,char *buf, int len, int begin){$/;"	f
listenfd	src/mytorrent.c	/^int listenfd;$/;"	v
main	src/mytorrent.c	/^int main ( int argc, char *argv[] )$/;"	f
main	src/shatest.c	/^int main()$/;"	f
main	src/simpletorrent.c	/^int main(int argc, char **argv) $/;"	f
make_listen_port	src/util.c	/^int make_listen_port(int port)$/;"	f
make_tracker_request	src/make_tracker_request.c	/^char* make_tracker_request(int event, int* mlen,struct globalInfo_t *info)$/;"	f
message_handler	src/peer_wire.c	/^void *message_handler(void *arg) {$/;"	f
message_handler_arg	src/peer_wire.h	/^typedef struct message_handler_arg_ message_handler_arg;$/;"	t	typeref:struct:message_handler_arg_
message_handler_arg_	src/peer_wire.h	/^struct message_handler_arg_ {$/;"	s
name	src/btdata.h	/^    char * name;     \/\/ 文件名$/;"	m	struct:_torrentmetadata
next	src/peers_pool.h	/^	struct _peerpool_node_t *next;$/;"	m	struct:_peerpool_node_t	typeref:struct:_peerpool_node_t::_peerpool_node_t
num_pieces	src/btdata.h	/^    int num_pieces; \/\/ 分片数量(为方便起见)$/;"	m	struct:_torrentmetadata
numpeers	src/btdata.h	/^    int numpeers;     $/;"	m	struct:_tracker_data
parse_announce_url	src/parse_announce_url.c	/^announce_url_t* parse_announce_url(char* announce)$/;"	f
parsetorrentfile	src/parsetorrentfile.c	/^torrentmetadata_t* parsetorrentfile(char* filename)$/;"	f
peer	src/peers_pool.h	/^	peer_t *peer;$/;"	m	struct:_peerpool_node_t
peerData	src/peer_wire.h	/^	peerdata *peerData;$/;"	m	struct:message_handler_arg_
peerT	src/peer_wire.h	/^	peer_t *peerT;$/;"	m	struct:message_handler_arg_
peer_accept	src/peer_wire.c	/^int peer_accept(int connfd) {$/;"	f
peer_choking	src/btdata.h	/^    int peer_choking;      \/\/ 作为上传者, 我们阻塞远端peer$/;"	m	struct:_peer_t
peer_connect	src/peer_wire.c	/^void peer_connect() {$/;"	f
peer_id	src/btdata.h	/^    char peer_id[20]; $/;"	m	struct:_peer_t
peer_id	src/btdata.h	/^    char peer_id[20];$/;"	m	struct:_tracker_request
peer_id	src/peer_wire.h	/^	char peer_id[20];   \/\/ 20-byte peer id which is reported in tracker requests and contained in peer lists in tracker responses$/;"	m	struct:handshake_seg_
peer_interested	src/btdata.h	/^    int peer_interested;   \/\/ 作为下载者, 对远端peer的分片有兴趣$/;"	m	struct:_peer_t
peer_t	src/btdata.h	/^} peer_t;$/;"	t	typeref:struct:_peer_t
peerdata	src/btdata.h	/^} peerdata;$/;"	t	typeref:struct:_peerdata
peerpool_node_t	src/peers_pool.h	/^} peerpool_node_t;$/;"	t	typeref:struct:_peerpool_node_t
peers	src/btdata.h	/^    peerdata* peers;  \/\/ pointer to an array, whose length is the value of numpeers$/;"	m	struct:_tracker_data
piece_len	src/btdata.h	/^    int piece_len;  \/\/ 每一个分片的字节数$/;"	m	struct:_torrentmetadata
pieces	src/btdata.h	/^    char* pieces;   \/\/ 针对所有分片的20字节长的SHA1哈希值连接而成的字符串$/;"	m	struct:_torrentmetadata
pool_add_peer	src/peers_pool.c	/^peer_t *pool_add_peer(int connfd, char peer_id[20]) {$/;"	f
port	src/btdata.h	/^    int port;$/;"	m	struct:_announce_url_t
port	src/btdata.h	/^    int port;$/;"	m	struct:_peerdata
port	src/btdata.h	/^    int port;$/;"	m	struct:_tracker_request
port	src/mytorrent.h	/^    int     port;$/;"	m	struct:globalArgs_t
port_listen	src/mytorrent.c	/^void *port_listen(void *arg){$/;"	f
preprocess_tracker_response	src/process_tracker_response.c	/^tracker_response* preprocess_tracker_response(int sockfd)$/;"	f
readn	src/process_tracker_response.c	/^int readn(int fd, char *bp, size_t len)$/;"	f
recvline	src/util.c	/^int recvline(int fd, char **line)$/;"	f
recvlinef	src/util.c	/^int recvlinef(int fd, char *format, ...)$/;"	f
reserved	src/peer_wire.h	/^	char reserved[8];   \/\/ eight reserved bytes$/;"	m	struct:handshake_seg_
reverse_byte_orderi	src/util.c	/^int reverse_byte_orderi(int i)$/;"	f
s	src/bencode.h	/^		char *s;$/;"	m	union:be_node::__anon2
send_handshake	src/peer_wire.c	/^int send_handshake(int connfd) {$/;"	f
set_bit	src/fileio.c	/^static char set_bit[8] = {1,2,4,8,16,32,64,128};$/;"	v	file:
set_bit_at_index	src/fileio.c	/^void set_bit_at_index(char *info, int index, int bit){$/;"	f
set_block	src/fileio.c	/^void set_block(int index, int begin, int length, char *block){$/;"	f
set_piece	src/fileio.c	/^int set_piece(FILE *fp, char *buf, int piece_num, int piece_size){$/;"	f
sha1_hash	src/peer_wire.h	/^	char sha1_hash[20]; \/\/ 20-byte sha1 hash, the same value which is announced as info_hash to the tracker$/;"	m	struct:handshake_seg_
size	src/btdata.h	/^    int size;       \/\/ B编码字符串的字节数$/;"	m	struct:_tracker_response
size	src/fileio.h	/^    int size;$/;"	m	struct:fileinfo_t
str	src/peer_wire.h	/^	char str[20];       \/\/ should be "BitTorrent protocol"$/;"	m	struct:handshake_seg_
torrentmetadata_t	src/btdata.h	/^} torrentmetadata_t;$/;"	t	typeref:struct:_torrentmetadata
torrentpath	src/mytorrent.h	/^    char*   torrentpath;$/;"	m	struct:globalArgs_t
tracker_data	src/btdata.h	/^} tracker_data;$/;"	t	typeref:struct:_tracker_data
tracker_request	src/btdata.h	/^} tracker_request;$/;"	t	typeref:struct:_tracker_request
tracker_response	src/btdata.h	/^} tracker_response;$/;"	t	typeref:struct:_tracker_response
type	src/bencode.h	/^	be_type type;$/;"	m	struct:be_node
uploaded	src/btdata.h	/^    int uploaded;$/;"	m	struct:_tracker_request
useage	src/mytorrent.c	/^void useage()$/;"	f
val	src/bencode.h	/^	struct be_node *val;$/;"	m	struct:be_dict	typeref:struct:be_dict::be_node
val	src/bencode.h	/^	} val;$/;"	m	struct:be_node	typeref:union:be_node::__anon2
wait_first_handshake	src/peer_wire.c	/^void *wait_first_handshake(void *arg) {$/;"	f
wait_second_handshake	src/peer_wire.c	/^void *wait_second_handshake(void *arg) {$/;"	f
